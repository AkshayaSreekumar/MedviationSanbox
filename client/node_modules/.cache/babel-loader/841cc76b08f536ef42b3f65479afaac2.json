{"ast":null,"code":"var _jsxFileName = \"/Users/akshayasreekumar/Documents/Akshaya/InterACTPayReactTs/interactPAY-TS/client/src/components/Stripe/Stripe.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./Stripe.css\";\nimport StripeCardList from \"./StripeCardList/StripeCardList\";\nimport { Modal, Placeholder } from 'react-bootstrap';\nimport axios from \"axios\";\nimport AddCard from '../CardManager/AddCard/AddCard';\nimport Spinner from '../Spinner/spinner';\nimport Alert from '../Alert/Alert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Stripe = props => {\n  _s();\n\n  const [alert, setAlert] = useState({});\n  const [isLoader, setIsLoader] = React.useState(false);\n  const [paymentExist, setPaymentExist] = React.useState(false);\n  const [cardList, setCardList] = useState([]);\n  const [isshowAddress, setIsShowAddress] = useState(false);\n  const [show, setShow] = useState(false);\n  const [isSetDefault, setIsSetDefault] = useState(false);\n  const [paymentType, setPaymentType] = useState({\n    credit_card: '',\n    debit_card: '',\n    ach: ''\n  });\n  useEffect(() => {\n    console.log(\"props.apicustomerid\" + props.apicustomerid);\n    loadCardData(props.apicustomerid);\n\n    if (isSetDefault) {\n      console.log(\"EditCard----->\" + isSetDefault);\n    }\n\n    getcharge();\n  }, [isSetDefault]);\n\n  async function getcharge() {\n    const response = await axios.get(\"/api/charges\"); //const redData:ChargeData = response.data;\n\n    console.log(JSON.stringify(response.data));\n    setPaymentType({\n      credit_card: response.data.credit_card,\n      debit_card: response.data.debit_card,\n      ach: response.data.ach\n    });\n  }\n\n  const loadCardData = cusId => {\n    console.log(\"invoked Card()!!!!\");\n    fetch(\"https://api.stripe.com/v1/payment_methods?type=card&customer=\" + cusId, {\n      method: \"GET\",\n      headers: {\n        \"x-rapidapi-host\": \"https://api.stripe.com\",\n        Authorization: \" Bearer sk_test_51K9PF1JZdmpiz6ZwomLVnx7eXnu0Buv19EwOe262mK5uj5E4bTpWO1trTF5S1OvVmdnpWtd2fm8s0HHbMlrqY2uZ00lWc3uV7c\"\n      }\n    }).then(response => response.json()).then(response => {\n      console.log(\"Card list--------------\" + JSON.stringify(response));\n      setCardList(response.data);\n\n      if (response.data) {\n        setPaymentExist(true);\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const selectedCard = (id, billing_details, card, type) => {\n    console.log(id, billing_details, card);\n    props.selectedCardPayment(id, billing_details, card);\n\n    if (type === \"card\") {\n      if (paymentType) {\n        props.setCharge(paymentType.credit_card);\n      }\n    }\n  };\n\n  const handleClose = () => {\n    setShow(false);\n  };\n\n  const handleShow = () => setShow(true);\n\n  const handleAddCard = () => {\n    setShow(true);\n  };\n\n  const createPaymentMethod = (cardNumber, cvv, validMonth, validYear, billingLine1, billingLine2, billingCity, billingCountry, billingState, billingPostalcode) => {\n    setIsLoader(true);\n    var createMethodUrl = \"https://api.stripe.com/v1/payment_methods\" + \"?type=card&card[number]=\" + cardNumber + \"&card[exp_month]=\" + validMonth + \"&card[exp_year]=\" + validYear + \"&card[cvc]=\" + cvv + \"&billing_details[address[city]]=\" + billingCity + \"&billing_details[address[line1]]=\" + billingLine1 + \"&billing_details[address[country]]=\" + billingCountry + \"&billing_details[address[postal_code]]=\" + billingPostalcode + \"&billing_details[address[state]]=\" + billingState;\n    console.log(\"createcard url-->\" + createMethodUrl);\n    fetch(createMethodUrl, {\n      method: \"POST\",\n      headers: {\n        \"x-rapidapi-host\": \"https://api.stripe.com\",\n        Authorization: \"Bearer sk_test_51K9PF1JZdmpiz6ZwomLVnx7eXnu0Buv19EwOe262mK5uj5E4bTpWO1trTF5S1OvVmdnpWtd2fm8s0HHbMlrqY2uZ00lWc3uV7c\"\n      }\n    }).then(response => response.json()).then(response => {\n      if (response.id) {\n        console.log(response);\n        attachPaymentmethod(response.id, props.apicustomerid);\n      } else {\n        var message = response.error.message;\n      }\n    }).catch(err => {\n      console.log(err);\n      var message = \" Error Occurred\";\n      var type = \"error\";\n    });\n  };\n\n  const attachPaymentmethod = (paymentMethodId, customerId) => {\n    console.log(\"this.customerId in attachPaymentmethod---->\" + paymentMethodId, customerId);\n    var attachUrl = \"https://api.stripe.com/v1/payment_methods/\" + paymentMethodId + \"/attach?customer=\" + customerId;\n    fetch(attachUrl, {\n      method: \"POST\",\n      headers: {\n        \"x-rapidapi-host\": \"https://api.stripe.com\",\n        Authorization: \"Bearer sk_test_51K9PF1JZdmpiz6ZwomLVnx7eXnu0Buv19EwOe262mK5uj5E4bTpWO1trTF5S1OvVmdnpWtd2fm8s0HHbMlrqY2uZ00lWc3uV7c\"\n      }\n    }).then(response => response.json()).then(response => {\n      console.log(\"attach payment medthod----->\", response);\n      defaultCardPayment(paymentMethodId, customerId);\n      setAlert({\n        status: 'success',\n        message: 'New card added Sucessfully'\n      });\n      loadCardData(props.apicustomerid);\n      setIsLoader(false);\n      handleClose();\n    }).catch(err => {\n      console.log(err);\n      var message = \" Error Occurred\";\n      var type = \"error\";\n    });\n  };\n\n  const getCardvalues = cardinputs => {\n    console.log(JSON.stringify(cardinputs.cardHolder));\n    console.log(cardinputs.cardNumber, cardinputs.cardCvv, cardinputs.cardMonth, cardinputs.cardYear, cardinputs.addrressline1, cardinputs.addrressline2, cardinputs.city, cardinputs.country, cardinputs.state && cardinputs.postalCode);\n\n    if (cardinputs.cardNumber && cardinputs.cardCvv && cardinputs.cardMonth && cardinputs.cardYear && cardinputs.addrressline1 && cardinputs.addrressline2 && cardinputs.city && cardinputs.country && cardinputs.state && cardinputs.postalCode) {\n      createPaymentMethod(cardinputs.cardNumber, cardinputs.cardCvv, cardinputs.cardMonth, cardinputs.cardYear, cardinputs.addrressline1, cardinputs.addrressline2, cardinputs.city, cardinputs.country, cardinputs.state, cardinputs.postalCode);\n    }\n  };\n\n  function refreshComponent() {\n    setIsLoader(true);\n    loadCardData(props.apicustomerid);\n    setIsLoader(false);\n  }\n\n  function defaultCardPayment(paymentId, customerId) {\n    console.log(\"-------------------defaultCardPayment-------------------\");\n    console.log(\"makeDefaultPaymentMethod.customerId---->\" + customerId);\n    var defaultpaymentUrl = \"https://api.stripe.com/v1/customers/\" + customerId + \"?invoice_settings[default_payment_method]=\" + paymentId;\n    console.log(\"defaultpaymentUrl---->\" + defaultpaymentUrl);\n    fetch(defaultpaymentUrl, // End point URL\n    {\n      method: \"POST\",\n      headers: {\n        \"x-rapidapi-host\": \"https://api.stripe.com\",\n        Authorization: \"Bearer sk_test_51K9PF1JZdmpiz6ZwomLVnx7eXnu0Buv19EwOe262mK5uj5E4bTpWO1trTF5S1OvVmdnpWtd2fm8s0HHbMlrqY2uZ00lWc3uV7c\"\n      }\n    }).then(response => {\n      console.log(\"default 1st response\");\n      console.log(\"response ===> \" + JSON.stringify(response));\n      return response.json(); // returning the response in the form of JSON\n    }).then(jsonResponse => {\n      console.log(\"default 2st response\");\n      console.log(\"jsonResponse ===> \" + JSON.stringify(jsonResponse));\n\n      if (jsonResponse.id) {\n        console.log(\"update contact ===> \");\n        updateContact(paymentId);\n      }\n    }).catch(error => {\n      console.log(\"callout error ===> \" + JSON.stringify(error));\n    });\n  }\n\n  function updateContact(paymentId) {\n    console.log(\"<<<<------------------this is for updating contact with default payment Id----------->>>>\");\n    var updateContactParams = {\n      defaultPaymentMethodId: paymentId,\n      contactId: \"contact Id\"\n    };\n    var url = \"---baseUrl---\" + \"InteractPay/services/apexrest/crma_pay/InterACTPayAuthorizationUpdated/?methodType=POST&inputParams=\" + JSON.stringify(updateContactParams);\n    console.log(\"this.updateContactUrl--->\" + url);\n    fetch(url, {\n      method: \"GET\",\n      headers: {\n        mode: \"cors\",\n        \"Access-Control-Allow-Origin\": \"*\"\n      }\n    }).then(response => response.json()).then(response => {\n      console.log(\"   updateContactUrl-->\" + JSON.stringify(response));\n    }).catch(err => {\n      console.log(\"err\" + err);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isLoader ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 19\n    }, this) : null, /*#__PURE__*/_jsxDEV(Alert, {\n      alert: alert,\n      setAlert: setAlert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }, this), paymentExist ? /*#__PURE__*/_jsxDEV(StripeCardList, {\n      cardList: cardList,\n      selectedCard: selectedCard,\n      refreshComponent: refreshComponent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 23\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card card-body bg-light- d-flex flex-row justify-content-between align-items-center\",\n      children: /*#__PURE__*/_jsxDEV(Placeholder, {\n        className: \"w-100 h9\",\n        animation: \"glow\",\n        children: [/*#__PURE__*/_jsxDEV(Placeholder, {\n          xs: 7\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 9\n        }, this), \" \", /*#__PURE__*/_jsxDEV(Placeholder, {\n          xs: 4\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 32\n        }, this), \" \", /*#__PURE__*/_jsxDEV(Placeholder, {\n          xs: 4\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 55\n        }, this), ' ', /*#__PURE__*/_jsxDEV(Placeholder, {\n          xs: 6\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 9\n        }, this), \" \", /*#__PURE__*/_jsxDEV(Placeholder, {\n          xs: 8\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 32\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 229\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 128\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-end\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-outline-success btn-sm lnch-btn my-2 rounded-pill rounded-pill\",\n        onClick: () => handleShow(),\n        children: \"Add new card\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-block\",\n      children: /*#__PURE__*/_jsxDEV(Modal, {\n        show: show,\n        onHide: handleClose,\n        ...props,\n        \"aria-labelledby\": \"contained-modal-title-vcenter\",\n        centered: true,\n        children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n          className: \"border-0 pb-0\",\n          children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n            className: \"fw-bold h6\",\n            children: \"Add new card\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n          children: /*#__PURE__*/_jsxDEV(AddCard, {\n            getCardvalues: getCardvalues,\n            handleClose: handleClose,\n            setIsSetDefault: setIsSetDefault\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Stripe, \"ZnqjraXxf0D5hJi3H+nKWhOBrZQ=\");\n\n_c = Stripe;\nexport default Stripe;\n\nvar _c;\n\n$RefreshReg$(_c, \"Stripe\");","map":{"version":3,"names":["React","useEffect","useState","StripeCardList","Modal","Placeholder","axios","AddCard","Spinner","Alert","Stripe","props","alert","setAlert","isLoader","setIsLoader","paymentExist","setPaymentExist","cardList","setCardList","isshowAddress","setIsShowAddress","show","setShow","isSetDefault","setIsSetDefault","paymentType","setPaymentType","credit_card","debit_card","ach","console","log","apicustomerid","loadCardData","getcharge","response","get","JSON","stringify","data","cusId","fetch","method","headers","Authorization","then","json","catch","err","selectedCard","id","billing_details","card","type","selectedCardPayment","setCharge","handleClose","handleShow","handleAddCard","createPaymentMethod","cardNumber","cvv","validMonth","validYear","billingLine1","billingLine2","billingCity","billingCountry","billingState","billingPostalcode","createMethodUrl","attachPaymentmethod","message","error","paymentMethodId","customerId","attachUrl","defaultCardPayment","status","getCardvalues","cardinputs","cardHolder","cardCvv","cardMonth","cardYear","addrressline1","addrressline2","city","country","state","postalCode","refreshComponent","paymentId","defaultpaymentUrl","jsonResponse","updateContact","updateContactParams","defaultPaymentMethodId","contactId","url","mode"],"sources":["/Users/akshayasreekumar/Documents/Akshaya/InterACTPayReactTs/interactPAY-TS/client/src/components/Stripe/Stripe.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./Stripe.css\";\nimport StripeCardList from \"./StripeCardList/StripeCardList\";\nimport { Modal, Button, Placeholder } from 'react-bootstrap';\nimport axios from \"axios\";\nimport AddCard from '../CardManager/AddCard/AddCard'\nimport Spinner from '../Spinner/spinner';\nimport Alert from '../Alert/Alert';\nimport { json } from \"stream/consumers\";\n\ninterface cardDataformat {\n  id: string;\n  bank_name: string;\n  card: {\n    last4: string;\n    exp_year: string;\n    exp_month: string;\n    brand: string;\n  },\n  billing_details: {\n    address: {\n      city: string,\n      country: string,\n      state: string,\n      line1: string,\n      line2: string,\n      postal_code: string,\n    }\n  }, type: string;\n  selectedCardPayment: (id: string, billing_details: {\n    address: {\n      city: string,\n      country: string,\n      state: string,\n      line1: string,\n      line2: string,\n      postal_code: string,\n    }\n  },\n    card: {\n      brand: string\n    },\n    type: string) => void;\n}\n\nconst Stripe = (props: any) => {\n  const [alert, setAlert] = useState({});\n  const [isLoader, setIsLoader] = React.useState(false);\n  const [paymentExist, setPaymentExist] = React.useState(false);\n  const [cardList, setCardList] = useState<cardDataformat[]>([]);\n  const [isshowAddress, setIsShowAddress] = useState(false);\n  const [show, setShow] = useState(false);\n  const [isSetDefault, setIsSetDefault] = useState(false);\n  const [paymentType, setPaymentType] = useState({\n    credit_card: '',\n    debit_card: '',\n    ach: ''\n  });\n\n  useEffect(() => {\n    console.log(\"props.apicustomerid\" + props.apicustomerid);\n    loadCardData(props.apicustomerid);\n\n    if (isSetDefault) {\n      console.log(\"EditCard----->\" + isSetDefault);\n    }\n    getcharge();\n  }, [isSetDefault]);\n\n  async function getcharge() {\n    const response = await axios.get(\"/api/charges\");\n    //const redData:ChargeData = response.data;\n    console.log(JSON.stringify(response.data))\n    setPaymentType({\n      credit_card: response.data.credit_card,\n      debit_card: response.data.debit_card,\n      ach: response.data.ach\n    });\n  }\n\n  const loadCardData = (cusId: string) => {\n    console.log(\"invoked Card()!!!!\");\n    fetch(\n      \"https://api.stripe.com/v1/payment_methods?type=card&customer=\" + cusId,\n      {\n        method: \"GET\",\n        headers: {\n          \"x-rapidapi-host\": \"https://api.stripe.com\",\n          Authorization:\n            \" Bearer sk_test_51K9PF1JZdmpiz6ZwomLVnx7eXnu0Buv19EwOe262mK5uj5E4bTpWO1trTF5S1OvVmdnpWtd2fm8s0HHbMlrqY2uZ00lWc3uV7c\",\n        },\n      }\n    )\n      .then((response) => response.json())\n      .then((response) => {\n        console.log(\"Card list--------------\" + JSON.stringify(response));\n        setCardList(response.data);\n        if (response.data) {\n          setPaymentExist(true);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const selectedCard = (id: string, billing_details: {}, card: {}, type: string) => {\n    console.log(id, billing_details, card);\n    props.selectedCardPayment(id, billing_details, card);\n    if (type === \"card\") {\n      if (paymentType) {\n        props.setCharge(paymentType.credit_card);\n      }\n    }\n  };\n\n  const handleClose = () => { setShow(false) };\n  const handleShow = () => setShow(true);\n  const handleAddCard = () => {\n    setShow(true)\n  }\n  const createPaymentMethod = (cardNumber: string, cvv: string, validMonth: string, validYear: string, billingLine1: string, billingLine2: string, billingCity: string, billingCountry: string, billingState: string, billingPostalcode: string) => {\n    setIsLoader(true);\n    var createMethodUrl =\n      \"https://api.stripe.com/v1/payment_methods\"\n      +\n      \"?type=card&card[number]=\" +\n      cardNumber +\n      \"&card[exp_month]=\" +\n      validMonth +\n      \"&card[exp_year]=\" +\n      validYear +\n      \"&card[cvc]=\" +\n      cvv +\n      \"&billing_details[address[city]]=\" + billingCity + \"&billing_details[address[line1]]=\" + billingLine1 + \"&billing_details[address[country]]=\" + billingCountry + \"&billing_details[address[postal_code]]=\" + billingPostalcode + \"&billing_details[address[state]]=\" + billingState;\n    console.log(\"createcard url-->\" + createMethodUrl);\n\n    fetch(createMethodUrl, {\n      method: \"POST\",\n      headers: {\n        \"x-rapidapi-host\": \"https://api.stripe.com\",\n        Authorization: \"Bearer sk_test_51K9PF1JZdmpiz6ZwomLVnx7eXnu0Buv19EwOe262mK5uj5E4bTpWO1trTF5S1OvVmdnpWtd2fm8s0HHbMlrqY2uZ00lWc3uV7c\",\n      },\n    })\n      .then((response) => response.json())\n      .then((response) => {\n        if (response.id) {\n          console.log(response);\n          attachPaymentmethod(response.id, props.apicustomerid)\n        } else {\n          var message = response.error.message;\n        }\n      }).catch((err) => {\n        console.log(err);\n        var message = \" Error Occurred\";\n        var type = \"error\";\n      });\n  }\n\n  const attachPaymentmethod = (paymentMethodId: string, customerId: string) => {\n    console.log(\"this.customerId in attachPaymentmethod---->\" + paymentMethodId, customerId);\n    var attachUrl =\n      \"https://api.stripe.com/v1/payment_methods/\" +\n      paymentMethodId +\n      \"/attach?customer=\" +\n      customerId;\n    fetch(attachUrl, {\n      method: \"POST\",\n      headers: {\n        \"x-rapidapi-host\": \"https://api.stripe.com\",\n        Authorization: \"Bearer sk_test_51K9PF1JZdmpiz6ZwomLVnx7eXnu0Buv19EwOe262mK5uj5E4bTpWO1trTF5S1OvVmdnpWtd2fm8s0HHbMlrqY2uZ00lWc3uV7c\",\n      },\n    })\n      .then((response) => response.json())\n      .then((response) => {\n        console.log(\"attach payment medthod----->\", response);\n        defaultCardPayment(paymentMethodId, customerId)\n        setAlert({ status: 'success', message: 'New card added Sucessfully' })\n        loadCardData(props.apicustomerid);\n        setIsLoader(false);\n        handleClose();\n      })\n      .catch((err) => {\n        console.log(err);\n        var message = \" Error Occurred\";\n        var type = \"error\";\n      });\n  }\n  const getCardvalues = (cardinputs: {\n    id: string;\n    cardNumber: string;\n    cardHolder: string;\n    cardMonth: string;\n    cardYear: string;\n    cardCvv: string;\n    addrressline1: string;\n    addrressline2: string;\n    country: string;\n    city: string;\n    state: string;\n    postalCode: string\n  }) => {\n    console.log(JSON.stringify(cardinputs.cardHolder));\n    console.log(cardinputs.cardNumber, cardinputs.cardCvv, cardinputs.cardMonth, cardinputs.cardYear, cardinputs.addrressline1, cardinputs.addrressline2, cardinputs.city, cardinputs.country, cardinputs.state && cardinputs.postalCode)\n    if (cardinputs.cardNumber && cardinputs.cardCvv && cardinputs.cardMonth && cardinputs.cardYear && cardinputs.addrressline1 && cardinputs.addrressline2 && cardinputs.city && cardinputs.country && cardinputs.state && cardinputs.postalCode) {\n      createPaymentMethod(cardinputs.cardNumber, cardinputs.cardCvv, cardinputs.cardMonth, cardinputs.cardYear, cardinputs.addrressline1, cardinputs.addrressline2, cardinputs.city, cardinputs.country, cardinputs.state, cardinputs.postalCode);\n    }\n  };\n  function refreshComponent() {\n    setIsLoader(true);\n    loadCardData(props.apicustomerid);\n    setIsLoader(false);\n  }\n\n\n  function defaultCardPayment(paymentId: string, customerId: string) {\n    console.log(\"-------------------defaultCardPayment-------------------\");\n    console.log(\"makeDefaultPaymentMethod.customerId---->\" + customerId);\n    var defaultpaymentUrl =\n      \"https://api.stripe.com/v1/customers/\" +\n      customerId +\n      \"?invoice_settings[default_payment_method]=\" +\n      paymentId;\n    console.log(\"defaultpaymentUrl---->\" + defaultpaymentUrl);\n    fetch(\n      defaultpaymentUrl, // End point URL\n      {\n        method: \"POST\",\n        headers: {\n          \"x-rapidapi-host\": \"https://api.stripe.com\",\n          Authorization: \"Bearer sk_test_51K9PF1JZdmpiz6ZwomLVnx7eXnu0Buv19EwOe262mK5uj5E4bTpWO1trTF5S1OvVmdnpWtd2fm8s0HHbMlrqY2uZ00lWc3uV7c\",\n        },\n      }\n    )\n      .then((response) => {\n        console.log(\"default 1st response\");\n        console.log(\"response ===> \" + JSON.stringify(response));\n        return response.json(); // returning the response in the form of JSON\n      })\n      .then((jsonResponse) => {\n        console.log(\"default 2st response\");\n        console.log(\"jsonResponse ===> \" + JSON.stringify(jsonResponse));\n        if (jsonResponse.id) {\n          console.log(\"update contact ===> \");\n          updateContact(paymentId);\n        }\n      })\n      .catch((error) => {\n        console.log(\"callout error ===> \" + JSON.stringify(error));\n      });\n  }\n  function updateContact(paymentId: string) {\n    console.log(\n      \"<<<<------------------this is for updating contact with default payment Id----------->>>>\"\n    );\n    var updateContactParams = { defaultPaymentMethodId: paymentId, contactId: \"contact Id\" };\n    var url = \"---baseUrl---\" +\n      \"InteractPay/services/apexrest/crma_pay/InterACTPayAuthorizationUpdated/?methodType=POST&inputParams=\" +\n      JSON.stringify(updateContactParams);\n    console.log(\"this.updateContactUrl--->\" + url);\n    fetch(url, {\n      method: \"GET\",\n      headers: {\n        mode: \"cors\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n    })\n      .then((response) => response.json())\n      .then((response) => {\n        console.log(\"   updateContactUrl-->\" + JSON.stringify(response));\n      })\n      .catch((err) => {\n        console.log(\"err\" + err);\n      });\n  }\n\n  return (\n    <>\n      {isLoader ? <Spinner /> : null}\n      <Alert alert={alert} setAlert={setAlert} />\n      {paymentExist ? <StripeCardList cardList={cardList} selectedCard={selectedCard} refreshComponent={refreshComponent} /> : <div className=\"card card-body bg-light- d-flex flex-row justify-content-between align-items-center\"><Placeholder className=\"w-100 h9\" animation=\"glow\">\n        <Placeholder xs={7} /> <Placeholder xs={4} /> <Placeholder xs={4} />{' '}\n        <Placeholder xs={6} /> <Placeholder xs={8} />\n      </Placeholder></div>}\n      <div className=\"text-end\">\n        <button className=\"btn btn-outline-success btn-sm lnch-btn my-2 rounded-pill rounded-pill\" onClick={() => handleShow()}>\n          Add new card\n        </button>\n      </div>\n\n      <div className='d-block'>\n        <Modal show={show} onHide={handleClose}\n          {...props}\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          centered>\n          <Modal.Header className='border-0 pb-0'>\n            <Modal.Title className='fw-bold h6'>Add new card</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <AddCard getCardvalues={getCardvalues} handleClose={handleClose} setIsSetDefault={setIsSetDefault} />\n          </Modal.Body>\n        </Modal>\n      </div>\n    </>\n  );\n};\nexport default Stripe;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}