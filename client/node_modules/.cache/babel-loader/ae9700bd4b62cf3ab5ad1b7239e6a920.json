{"ast":null,"code":"var _jsxFileName = \"/Users/akshayasreekumar/Documents/InterACTPayV2MedDev/interactpay/client/src/components/CardManager/AddCard/AddCard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useCallback, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Card from '../Card';\nimport CardForm from '../CardForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  id: '',\n  cardNumber: '',\n  cardHolder: '',\n  cardMonth: '',\n  cardYear: '',\n  cardCvv: '',\n  addrressline1: '',\n  addrressline2: '',\n  country: '',\n  city: '',\n  state: '',\n  postalCode: ''\n};\nexport default function AddCard(props) {\n  _s();\n\n  const navigate = useNavigate();\n  const [state, setState] = useState(initialState);\n  const [isCardFlipped, setIsCardFlipped] = useState(false);\n  const updateStateValues = useCallback((keyName, value) => {\n    setState({ ...state,\n      [keyName]: value || ''\n    });\n  }, [state]);\n\n  function handleSubmitAction() {\n    try {\n      let newCardsList = []; // if (localStorage.getItem('cards')) {\n      //   const storageCards = JSON.parse(localStorage.getItem('cards') ?? '');\n      //   newCardsList = storageCards ? [...storageCards] : [];\n      // }\n      // newCardsList.push({\n      //   ...state,\n      //   id: uuid(),\n      // });\n\n      console.log(state);\n      props.getCardvalues(state); // updateLocalStorageCards(newCardsList);\n      // navigate('/');\n    } catch (error) {\n      alert(error);\n      console.log(error);\n    } finally {//release resources or stop loader\n    }\n  }\n\n  function handleCloseModal() {\n    props.handleClose();\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-card-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wrapper\",\n        children: /*#__PURE__*/_jsxDEV(CardForm, {\n          selectedCreditCard: state,\n          onUpdateState: updateStateValues,\n          setIsCardFlipped: setIsCardFlipped,\n          handleSubmitAction: handleSubmitAction,\n          handleCloseModal: handleCloseModal,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            cardNumber: state.cardNumber,\n            cardHolder: state.cardHolder,\n            cardMonth: state.cardMonth,\n            cardYear: state.cardYear,\n            cardCvv: state.cardCvv,\n            isCardFlipped: isCardFlipped\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddCard, \"68buSCVaxqDaXi0HRTfqqk0nqZM=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AddCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddCard\");","map":{"version":3,"names":["React","Fragment","useCallback","useState","useNavigate","Card","CardForm","initialState","id","cardNumber","cardHolder","cardMonth","cardYear","cardCvv","addrressline1","addrressline2","country","city","state","postalCode","AddCard","props","navigate","setState","isCardFlipped","setIsCardFlipped","updateStateValues","keyName","value","handleSubmitAction","newCardsList","console","log","getCardvalues","error","alert","handleCloseModal","handleClose"],"sources":["/Users/akshayasreekumar/Documents/InterACTPayV2MedDev/interactpay/client/src/components/CardManager/AddCard/AddCard.tsx"],"sourcesContent":["import React, { Fragment, useCallback, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { v4 as uuid } from 'uuid';\nimport Card from '../Card';\nimport CardForm from '../CardForm';\nimport { CreditCard, updateLocalStorageCards } from '../CreditCard';\n\nconst initialState: CreditCard = {\n  id: '',\n  cardNumber: '',\n  cardHolder: '',\n  cardMonth: '',\n  cardYear: '',\n  cardCvv: '',\n  addrressline1:'',\n  addrressline2:'',\n  country:'',\n  city:'',\n  state:'',\n  postalCode:''\n};\n\nexport default function AddCard(props:any) {\n  const navigate = useNavigate();\n  const [state, setState] = useState<CreditCard>(initialState);\n  const [isCardFlipped, setIsCardFlipped] = useState(false);\n\n  const updateStateValues = useCallback(\n    (keyName:any, value:any) => {\n      setState({\n        ...state,\n        [keyName]: value || '',\n      });\n    },\n    [state],\n  );\n\n  function handleSubmitAction() {\n    try {\n      let newCardsList: CreditCard[] = [];\n      // if (localStorage.getItem('cards')) {\n      //   const storageCards = JSON.parse(localStorage.getItem('cards') ?? '');\n      //   newCardsList = storageCards ? [...storageCards] : [];\n      // }\n\n      // newCardsList.push({\n      //   ...state,\n      //   id: uuid(),\n      // });\n      console.log(state);\n      props.getCardvalues(state);\n     // updateLocalStorageCards(newCardsList);\n     // navigate('/');\n    } catch (error: any) {\n      alert(error);\n      console.log(error);\n    } finally {\n      //release resources or stop loader\n    }\n  }\nfunction handleCloseModal(){\n  props.handleClose();\n}\n  return (\n    <Fragment>\n      <div className=\"add-card-content\">\n        <div className=\"wrapper\">\n          <CardForm\n            selectedCreditCard={state}\n            onUpdateState={updateStateValues}\n            setIsCardFlipped={setIsCardFlipped}\n            handleSubmitAction={handleSubmitAction}\n            handleCloseModal={handleCloseModal}\n          >\n            <Card\n              cardNumber={state.cardNumber}\n              cardHolder={state.cardHolder}\n              cardMonth={state.cardMonth}\n              cardYear={state.cardYear}\n              cardCvv={state.cardCvv}\n              isCardFlipped={isCardFlipped}\n            ></Card>\n          </CardForm>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,QAAP,MAAqB,aAArB;;AAGA,MAAMC,YAAwB,GAAG;EAC/BC,EAAE,EAAE,EAD2B;EAE/BC,UAAU,EAAE,EAFmB;EAG/BC,UAAU,EAAE,EAHmB;EAI/BC,SAAS,EAAE,EAJoB;EAK/BC,QAAQ,EAAE,EALqB;EAM/BC,OAAO,EAAE,EANsB;EAO/BC,aAAa,EAAC,EAPiB;EAQ/BC,aAAa,EAAC,EARiB;EAS/BC,OAAO,EAAC,EATuB;EAU/BC,IAAI,EAAC,EAV0B;EAW/BC,KAAK,EAAC,EAXyB;EAY/BC,UAAU,EAAC;AAZoB,CAAjC;AAeA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAA4B;EAAA;;EACzC,MAAMC,QAAQ,GAAGlB,WAAW,EAA5B;EACA,MAAM,CAACc,KAAD,EAAQK,QAAR,IAAoBpB,QAAQ,CAAaI,YAAb,CAAlC;EACA,MAAM,CAACiB,aAAD,EAAgBC,gBAAhB,IAAoCtB,QAAQ,CAAC,KAAD,CAAlD;EAEA,MAAMuB,iBAAiB,GAAGxB,WAAW,CACnC,CAACyB,OAAD,EAAcC,KAAd,KAA4B;IAC1BL,QAAQ,CAAC,EACP,GAAGL,KADI;MAEP,CAACS,OAAD,GAAWC,KAAK,IAAI;IAFb,CAAD,CAAR;EAID,CANkC,EAOnC,CAACV,KAAD,CAPmC,CAArC;;EAUA,SAASW,kBAAT,GAA8B;IAC5B,IAAI;MACF,IAAIC,YAA0B,GAAG,EAAjC,CADE,CAEF;MACA;MACA;MACA;MAEA;MACA;MACA;MACA;;MACAC,OAAO,CAACC,GAAR,CAAYd,KAAZ;MACAG,KAAK,CAACY,aAAN,CAAoBf,KAApB,EAZE,CAaH;MACA;IACA,CAfD,CAeE,OAAOgB,KAAP,EAAmB;MACnBC,KAAK,CAACD,KAAD,CAAL;MACAH,OAAO,CAACC,GAAR,CAAYE,KAAZ;IACD,CAlBD,SAkBU,CACR;IACD;EACF;;EACH,SAASE,gBAAT,GAA2B;IACzBf,KAAK,CAACgB,WAAN;EACD;;EACC,oBACE,QAAC,QAAD;IAAA,uBACE;MAAK,SAAS,EAAC,kBAAf;MAAA,uBACE;QAAK,SAAS,EAAC,SAAf;QAAA,uBACE,QAAC,QAAD;UACE,kBAAkB,EAAEnB,KADtB;UAEE,aAAa,EAAEQ,iBAFjB;UAGE,gBAAgB,EAAED,gBAHpB;UAIE,kBAAkB,EAAEI,kBAJtB;UAKE,gBAAgB,EAAEO,gBALpB;UAAA,uBAOE,QAAC,IAAD;YACE,UAAU,EAAElB,KAAK,CAACT,UADpB;YAEE,UAAU,EAAES,KAAK,CAACR,UAFpB;YAGE,SAAS,EAAEQ,KAAK,CAACP,SAHnB;YAIE,QAAQ,EAAEO,KAAK,CAACN,QAJlB;YAKE,OAAO,EAAEM,KAAK,CAACL,OALjB;YAME,aAAa,EAAEW;UANjB;YAAA;YAAA;YAAA;UAAA;QAPF;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAwBD;;GAjEuBJ,O;UACLhB,W;;;KADKgB,O"},"metadata":{},"sourceType":"module"}